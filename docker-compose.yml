version: '3'

networks:
  gdp:

services:
# web服务
  nginx:
    build:
      context: ./services/nginx
      args:
        NGINX_VERSION: nginx:${NGINX_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
    container_name: ${PACKAGE}nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
    volumes:
      - ${SOURCE_DIR}/php:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl:rw
      - ${NGINX_VHOST_DIR}:/etc/nginx/vhost/:rw
      - ${NGINX_REWRITE_DIR}:/etc/nginx/rewrite/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
    environment:
      TZ: "$TZ"
    restart: always
    networks:
      - gdp

  # openresty:
  #   image:  openresty/openresty:${OPENRESTY_VERSION}
  #   container_name: ${PACKAGE}openresty
  #   ports:
  #      - "${OPENRESTY_HTTP_HOST_PORT}:80"
  #      - "${OPENRESTY_HTTPS_HOST_PORT}:443"
  #   volumes:
  #      - ${SOURCE_DIR}/php:/www/:rw
  #      - ${OPENRESTY_CONFD_DIR}:/etc/nginx/conf.d/:ro
  #      - ${OPENRESTY_SSL_CERTIFICATE_DIR}:/ssl:rw
  #      - ${OPENRESTY_CONF_FILE}:/usr/local/openresty/nginx/conf/nginx.conf:ro
  #      - ${OPENRESTY_FASTCGI_PHP_CONF}:/usr/local/openresty/nginx/conf/fastcgi-php.conf:ro
  #      - ${OPENRESTY_CONF_FASTCGIPARAMS_FILE}:/usr/local/openresty/nginx/conf/fastcgi_params:ro
  #      - ${OPENRESTY_LOG_DIR}:/var/log/nginx/:rw
  #   environment:
  #     TZ: "$TZ"
  #   networks:
  #     - gdp

# 开发语言
  php:
    build:
      context: ./services/php
      args:
        PHP_VERSION: php:${PHP_VERSION}-fpm-alpine
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        PHP_EXTENSIONS: ${PHP_EXTENSIONS}
        TZ: "$TZ"
    container_name: ${PACKAGE}php
    expose:
      - 9501
    extra_hosts:                  # 用于访问宿主机
      - "${HOST_MACHINE}:172.17.0.1"
    volumes:
      - ${SOURCE_DIR}/php:/www/:rw
      - ${PHP_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${PHP_LOG_DIR}:/var/log/php
      - ${DATA_DIR}/composer:/tmp/composer
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - gdp

  # php80:
  #   build:
  #     context: ./services/php80
  #     args:
  #       PHP_VERSION: php:${PHP80_VERSION}-fpm-alpine3.13
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #       PHP_EXTENSIONS: ${PHP80_EXTENSIONS}
  #       TZ: "$TZ"
  #   container_name: ${PACKAGE}php80
  #   expose:
  #     - 9501
  #   volumes:
  #     - ${SOURCE_DIR}/php:/www/:rw
  #     - ${PHP80_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
  #     - ${PHP80_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
  #     - ${PHP80_LOG_DIR}:/var/log/php
  #     - ${DATA_DIR}/composer:/tmp/composer
  #   restart: always
  #   cap_add:
  #     - SYS_PTRACE
  #   networks:
  #     - gdp

  golang:
    build:
      context: ./services/golang
      args:
        GO_VERSION: ${GO_VERSION}
        TZ: "$TZ"
    container_name: ${PACKAGE}go
    environment:
      - TZ=${TZ}
    privileged: true  # 调用宿主机其他服务
    tty: true         # 让容器保持运行
    stdin_open: true
    volumes:
      - ${SOURCE_DIR}/go/src:/www/code
    ports:
      - "${GO_DEFAULT_API_PORT}:${GO_DEFAULT_API_PORT}"
    networks:
      - gdp
    restart: always

  node:
    image: node:${NODE_VERSION}
    container_name: ${PACKAGE}node
    environment:
      - NODE_ENV=development
    volumes:
      - ${SOURCE_DIR}:/www/:rw
    expose:
      - "8081"
    networks:
      - gdp
    stdin_open: true
    tty: true

# 数据库
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: ${PACKAGE}mysql
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    volumes:
      - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${DATA_DIR}/mysql:/var/lib/mysql/:rw
    restart: always
    networks:
      - gdp
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      TZ: "$TZ"

  # mysql5:
  #   image: mysql:${MYSQL5_VERSION}
  #   container_name: ${PACKAGE}mysql5
  #   ports:
  #     - "${MYSQL5_HOST_PORT}:3306"
  #   volumes:
  #     - ${MYSQL5_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
  #     - ${DATA_DIR}/mysql5:/var/lib/mysql/:rw
  #   restart: always
  #   networks:
  #     - gdp
  #   environment:
  #     MYSQL_ROOT_PASSWORD: "${MYSQL5_ROOT_PASSWORD}"
  #     TZ: "$TZ"

  redis:
    image: redis:${REDIS_VERSION}
    container_name: ${PACKAGE}redis
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
      - ${DATA_DIR}/redis:/data/:rw
    restart: always
    entrypoint: ["redis-server", "/etc/redis.conf"]
    environment:
      TZ: "$TZ"
    networks:
      - gdp

  memcached:
    image: memcached:${MEMCACHED_VERSION}
    container_name: ${PACKAGE}memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    environment:
       MEMCACHED_CACHE_SIZE: "${MEMCACHED_CACHE_SIZE}"
    networks:
      - gdp

  mongodb:
    image: mongo:${MONGODB_VERSION}
    container_name: ${PACKAGE}mongodb
    environment:
        MONGO_INITDB_ROOT_USERNAME: "${MONGODB_INITDB_ROOT_USERNAME}"
        MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_INITDB_ROOT_PASSWORD}"
        TZ: "$TZ"
    volumes:
      - ${DATA_DIR}/mongo/data:/data/db:rw
      - ${DATA_DIR}/mongo/key:/mongo:rw
    ports:
       - "${MONGODB_HOST_PORT}:27017"
    networks:
      - gdp
    command:
       --auth

  etcd:
    build:
      context: ./services/etcd                    # 指定构建使用的 Dockerfile 文件
    container_name: ${PACKAGE}etcd
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://gdp_etcd:2379
    ports:
      - "${ETCD_PORT}:2379"
    networks:
      - gdp
    restart: always

  elasticsearch:
    build:
      context: ./services/elasticsearch
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
        ELASTICSEARCH_PLUGINS: ${ELASTICSEARCH_PLUGINS}
    container_name: ${PACKAGE}elasticsearch
    environment:
      - TZ=$TZ
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ${DATA_DIR}/esdata:/usr/share/elasticsearch/data
      - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
    hostname: elasticsearch
    restart: always
    ports:
      - "${ELASTICSEARCH_HOST_PORT_C}:9200"
      - "${ELASTICSEARCH_HOST_PORT_S}:9300"
    networks:
      - gdp

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${PACKAGE}postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0
    volumes:
      - ${DATA_DIR}/postgres:/var/lib/postgresql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - gdp

# 队列
  rabbitmq:
    build:
      context: ./services/rabbitmq
      args:
        RABBITMQ_VERSION: ${RABBITMQ_VERSION}
        RABBITMQ_PLUGINS: ${RABBITMQ_PLUGINS}
    container_name: ${PACKAGE}rabbitmq
    restart: always
    ports:
      - "${RABBITMQ_HOST_PORT_C}:5672"
      - "${RABBITMQ_HOST_PORT_S}:15672"
    volumes:
      - ${DATA_DIR}/rabbitmq/data:/var/lib/rabbitmq
      - ${LOG_DIR}/rabbitmq:/var/log/rabbitmq
    environment:
       TZ: "$TZ"
    networks:
      - gdp

  pulsar:
    build:
      context: ./services/pulsar
      args:
        PULSAR_VERSION: ${PULSAR_VERSION}
    container_name: ${PACKAGE}pulsar
    command: bin/pulsar standalone
    restart: always
    ports:
      - "${PULSAR_HOST_PORT_I}:6650"
      - "${PULSAR_HOST_PORT_S}:8080"
    volumes:
      - ${DATA_DIR}/pulsar:/pulsar/data
      - ./services/pulsar/conf:/pulsar/conf
    networks:
      - gdp

# 辅助工具

  # elastichd:
  #   build:
  #     context: ./services/elastichd
  #   container_name: ${PACKAGE}elastichd
  #   ports:
  #     - "${ELASTIC_HD_PORT}:9800"
  #   networks:
  #     - gdp
  #   depends_on:
  #     - elasticsearch

  phpredisadmin:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: ${PACKAGE}phpredisadmin
    ports:
      - "${REDISMYADMIN_HOST_PORT}:80"
    networks:
      - gdp
    environment:
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}           # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}           # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=${PACKAGE}redis
      - REDIS_1_PORT=6379
      - TZ=$TZ

  # adminmongo:
  #   image: mrvautin/adminmongo
  #   container_name: ${PACKAGE}adminmongo
  #   ports:
  #     - "${ADMINMONGO_HOST_PORT}:1234"
  #   environment:
  #     - HOST=0.0.0.0
  #     - DB_HOST=${PACKAGE}mongodb
  #     - DB_PORT=27017
  #   networks:
  #     - gdp

  etcd-manage:
    build:
      context: ./services/etcd-manage
    container_name: ${PACKAGE}etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - etcd                                          # 在 etcd 服务容器启动后启动
    networks:
      - gdp
    restart: always

  kibana:
    image: kibana:${KIBANA_VERSION}
    container_name: ${PACKAGE}kibana
    environment:
      TZ: "$TZ"
      ELASTICSEARCH_HOSTS: '["http://${PACKAGE}elasticsearch:9200"]'
      I18N_LOCALE: "${KIBANA_I18N_LOCALE}"
    hostname: kibana
    depends_on:
      - elasticsearch
    restart: always
    ports:
      - "${KIBANA_HOST}:5601"
    networks:
      - gdp

  logstash:
    build:
      context: ./services/logstash
      args:
        LOGSTASH_VERSION: ${LOGSTASH_VERSION}
    container_name: ${PACKAGE}logstash
    hostname: logstash
    restart: always
    volumes:
      - ${LOG_DIR}:/data/logs
      - ${LOGSTASH_CONF_FILE}:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    environment:
      TZ: "$TZ"
    ports:
      - "${LOGSTASH_HOST_PORT_C}:9600"
      - "${LOGSTASH_HOST_PORT_S}:5044"
    networks:
      - gdp

  prometheus:
    build:
      context: ./services/prometheus
    container_name: ${PACKAGE}prometheus
    environment:
      - TZ=${TZ}
    volumes:
      - ./services/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml:rw  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - gdp
    restart: always

  grafana:
    build:
      context: ./services/grafana
    container_name: ${PACKAGE}grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - gdp
    restart: always

  jaeger:
    build:
      context: ./services/jaeger
      args:
        JAEGER_VERSION: ${JAEGER_VERSION}
    container_name: ${PACKAGE}jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - gdp
    restart: always

  dtm:
    build:
      context: ./services/dtm
    container_name: ${PACKAGE}dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    volumes:
      - ./services/dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - gdp
    restart: always

  pulsar-manager:
    image: apachepulsar/pulsar-manager:${PULSAR_MANAGER_VERSION}
    container_name: ${PACKAGE}pulsar-manager
    restart: always
    ports:
      - "${PULSAR_MANAGER_HOST_PORT_H}:9527"
      - "${PULSAR_MANAGER_HOST_PORT_I}:7750"
    depends_on:
      - pulsar
    environment:
      - SPRING_CONFIGURATION_FILE=/pulsar-manager/pulsar-manager/application.properties

  # supervisor:
  #   build:
  #     context: ./services/supervisor
  #     args:
  #       ALPINE_VERSION: alpine:${ALPINE_VERSION}
  #       TZ: "$TZ"
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #   container_name: ${PACKAGE}supervisor
  #   ports:
  #     - "${SUPERVISOR_HOST_PORT_C}:9001"
  #   volumes:
  #     - ${SOURCE_DIR}:/www/:rw
  #     - ${SUPERVISOR_LOG}:/var/log/supervisor/:rw
  #     - ${SUPERVISOR_CONFIG}:/etc/supervisor/conf.d/:rw
  #     - ${SUPERVISOR_CONF_FILE}:/etc/supervisor/supervisord.conf:ro
  #   command:
  #     - /bin/sh
  #     - -c
  #     - |
  #       supervisord -n -c /etc/supervisor/supervisord.conf
  #   restart: always
  #   cap_add:
  #     - SYS_PTRACE
  #   networks:
  #     - gdp
